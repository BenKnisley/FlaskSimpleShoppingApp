TICKET: 36, CREATED: Jun/5/2016, AUTHOR: Ben Knisley
  - Add a addToCart path to controller
  - Make it take a post request, with a product argument
  - Make it do nothing but print given productID to shell

TICKET: 35, CREATED: Jun/5/2016, AUTHOR: Ben Knisley
  - Make visitor cookie expire after 2 weeks

TICKET: 34, CREATED: Jun/5/2016, AUTHOR: Ben Knisley
  - Make model.pageVisit not add new entry if last page is same

TICKET: 33, CREATED: Jun/3/2016, AUTHOR: Ben Knisley
- Make searchProducts function display "No results found" if searchlist is empty

MILESTONE: App has a complete user tracking system
  Tracks users IP addresses and last visit time, and pages visited.

TICKET: 32, CREATED: Jun/3/2016, AUTHOR: Ben Knisley
  - Add a page visit tracker
    - Add a model.pageVisit fn
      - Adds page to pageVisits and updates lastTime
    - and a json list entry called pageVisits into visitor table

TICKET: 31, CREATED: Jun/3/2016, AUTHOR: Ben Knisley
  - In controller edit product function to call 404 like taggedProducts function
  - The if nested in function, instead of if/else

TICKET: 30, CREATED: Jun/3/2016, AUTHOR: Ben Knisley
  - Create new columns in visitor table
    - Holds visitID, IP Addr, and lastActive
  - Modify newVisitor function to take ip info

TICKET: 29, CREATED: May/31/2016, AUTHOR: Ben Knisley
  - Create function in model that generates a random visitor ID
  - Give all new visitors a visitor ID instead of plain string

TICKET: 28, CREATED: May/31/2016, AUTHOR: Ben Knisley
  - Give all incoming visitors a cookie
  - Named 'visit'
  - The cookie content will be simple string
  - Works with all pages

TICKET: 27, CREATED: May/31/2016, AUTHOR: Ben Knisley
  - Add link to home in master templates

MILESTONE: App has complete product browsing system.
  - Browse products by tags, searching, all products.
  - Click on product, and displays product page.

TICKET: 26, CREATED: May/29/2016, AUTHOR: Ben Knisley
  - On / page
    - Add link to all products.
    - Add search bar
  - This is not meaningful, except that is give testing a fluid experience.


TICKET: 25, CREATED: May/22/2016, AUTHOR: Ben Knisley
  - Add a get products by search method to model.
  - Take a search query as a string.
  - Return list of products

TICKET: 24, CREATED: May/29/2016, AUTHOR: Ben Knisley
- Add a link to product page in index template

TICKET: 23, CREATED: Apr/4/2016, AUTHOR: Ben Knisley
  - Add route that displays an index of a certain tag.

TICKET: 22, CREATED: Apr/4/2016, AUTHOR: Ben Knisley
  - Add a index template that displays a list of product given to it via a
    list of product objects.

TICKET: 21, CREATED: Apr/2/2016, AUTHOR: Ben Knisley
  - Document the product class.

TICKET: 20, Completed: Apr/4/2016, AUTHOR: Ben Knisley
  - Create a index route that returns a list of names of products returned by
     model.returnAllProducts.

TICKET: 19, CREATED: Apr/3/2016, AUTHOR: Ben Knisley
  - Create model.returnAllProducts that returns a list of all products.

TICKET: 18, CREATED: Apr/2/2016, AUTHOR: Ben Knisley
  - Add a col in products table for class product relations.
  - Used json for each tag.

TICKET: 17, CREATED: Mar/31/2016, AUTHOR: Ben Knisley
  - Add 5 to 15 new products on a different class than fruits.

MILESTONE: The whole product system works!
  - Controller takes ID from url.
  - Model returns its existence and its data.
  - View renders it to display.

TICKET: 16, CREATED: Mar/31/2016, AUTHOR: Ben Knisley
  - Convert product route to take arg in url, and display that product.
  - Redirect to 404 page if not found.

TICKET: 15, CREATED: Mar/31/2016, AUTHOR: Ben Knisley
  - Make product exist work.
  - Make product route query if and only if product exists.

TICKET: 14, CREATED: Mar/31/2016, AUTHOR: Ben Knisley
  - Convert model.getProductByID() function to query SQL database.

TICKET: 13, CREATED: Mar/31/2016, AUTHOR: Ben Knisley
  - Create SQLite database for project.
  - Add product table.
  - Add 6 products.

TICKET: 12, CREATED: Mar/26/2016, AUTHOR: Ben Knisley
  - Add view.product() to process input and route output for product template.

TICKET: 11, CREATED: Mar/26/2016, AUTHOR: Ben Knisley
  - Build product template to display a product from the database
    - Make it take a product object.

TICKET: 8, CREATED: Mar/26/2016, AUTHOR: Ben Knisley
  - Add a dummy getProductByID(ID) that returns a single dummy object.

TICKET: 7, CREATED: Mar/26/2016, AUTHOR: Ben Knisley
  - Create a product class in its own file in the model folder.
  - Include everything you want to include in the database.

TICKET: 6, CREATED: Mar/26/2016, AUTHOR: Ben Knisley
  - Document all files better. Comment all the code, and write a header for each
    file.

TICKET: 10, CREATED: Mar/26/2016, AUTHOR: Ben Knisley
  - Remove /controller dir.

TICKET: 5, CREATED: Mar/26/2016, AUTHOR: Ben Knisley
  - Inside /view/__init__.py create a function display(file) that reads the
      contents of file, and hands it to the display template, and returns the
      results.

TICKET: 4, CREATED: Mar/26/2016, AUTHOR: Ben Knisley
  - Inside /view create /template directory.
  - Add TICKET 3 master template to /template dir.

TICKET: 3, COMPETED: Mar/26/2016, AUTHOR: Ben Knisley
  - Create a basic placeholder master template.

TICKET: 2, COMPLETED: Mar/26/2016, AUTHOR: Ben Knisley
  - Create a model, a view, and a controller directories; each with a __init__.py
    file to convert to to a model.

TICKET: 1, COMPLETED: Mar/26/2016, AUTHOR: Ben Knisley
    Setup Minimal Flask Application
      - Create a controller.py that runs a minimal Flask app.
